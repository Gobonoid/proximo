// Code generated by protoc-gen-go.
// source: proximo.proto
// DO NOT EDIT!

/*
Package proximo is a generated protocol buffer package.

It is generated from these files:
	proximo.proto

It has these top-level messages:
	Message
	ConsumerRequest
	StartConsumeRequest
	Confirmation
	PublisherRequest
	StartPublishRequest
*/
package proximo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Id   string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ConsumerRequest struct {
	// expected if this is a start request
	StartRequest *StartConsumeRequest `protobuf:"bytes,2,opt,name=startRequest" json:"startRequest,omitempty"`
	// expected if this is a confirmation
	Confirmation *Confirmation `protobuf:"bytes,3,opt,name=confirmation" json:"confirmation,omitempty"`
}

func (m *ConsumerRequest) Reset()                    { *m = ConsumerRequest{} }
func (m *ConsumerRequest) String() string            { return proto.CompactTextString(m) }
func (*ConsumerRequest) ProtoMessage()               {}
func (*ConsumerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConsumerRequest) GetStartRequest() *StartConsumeRequest {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *ConsumerRequest) GetConfirmation() *Confirmation {
	if m != nil {
		return m.Confirmation
	}
	return nil
}

type StartConsumeRequest struct {
	Topic    string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Consumer string `protobuf:"bytes,2,opt,name=consumer" json:"consumer,omitempty"`
}

func (m *StartConsumeRequest) Reset()                    { *m = StartConsumeRequest{} }
func (m *StartConsumeRequest) String() string            { return proto.CompactTextString(m) }
func (*StartConsumeRequest) ProtoMessage()               {}
func (*StartConsumeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StartConsumeRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *StartConsumeRequest) GetConsumer() string {
	if m != nil {
		return m.Consumer
	}
	return ""
}

type Confirmation struct {
	MsgID string `protobuf:"bytes,1,opt,name=msgID" json:"msgID,omitempty"`
}

func (m *Confirmation) Reset()                    { *m = Confirmation{} }
func (m *Confirmation) String() string            { return proto.CompactTextString(m) }
func (*Confirmation) ProtoMessage()               {}
func (*Confirmation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Confirmation) GetMsgID() string {
	if m != nil {
		return m.MsgID
	}
	return ""
}

type PublisherRequest struct {
	// expected if this is a start request
	StartRequest *StartPublishRequest `protobuf:"bytes,2,opt,name=startRequest" json:"startRequest,omitempty"`
	// expected if this is a message
	Msg *Message `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *PublisherRequest) Reset()                    { *m = PublisherRequest{} }
func (m *PublisherRequest) String() string            { return proto.CompactTextString(m) }
func (*PublisherRequest) ProtoMessage()               {}
func (*PublisherRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PublisherRequest) GetStartRequest() *StartPublishRequest {
	if m != nil {
		return m.StartRequest
	}
	return nil
}

func (m *PublisherRequest) GetMsg() *Message {
	if m != nil {
		return m.Msg
	}
	return nil
}

type StartPublishRequest struct {
	Topic string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
}

func (m *StartPublishRequest) Reset()                    { *m = StartPublishRequest{} }
func (m *StartPublishRequest) String() string            { return proto.CompactTextString(m) }
func (*StartPublishRequest) ProtoMessage()               {}
func (*StartPublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StartPublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "pubsub.Message")
	proto.RegisterType((*ConsumerRequest)(nil), "pubsub.ConsumerRequest")
	proto.RegisterType((*StartConsumeRequest)(nil), "pubsub.StartConsumeRequest")
	proto.RegisterType((*Confirmation)(nil), "pubsub.Confirmation")
	proto.RegisterType((*PublisherRequest)(nil), "pubsub.PublisherRequest")
	proto.RegisterType((*StartPublishRequest)(nil), "pubsub.StartPublishRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MessageSource service

type MessageSourceClient interface {
	Consume(ctx context.Context, opts ...grpc.CallOption) (MessageSource_ConsumeClient, error)
}

type messageSourceClient struct {
	cc *grpc.ClientConn
}

func NewMessageSourceClient(cc *grpc.ClientConn) MessageSourceClient {
	return &messageSourceClient{cc}
}

func (c *messageSourceClient) Consume(ctx context.Context, opts ...grpc.CallOption) (MessageSource_ConsumeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageSource_serviceDesc.Streams[0], c.cc, "/pubsub.MessageSource/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSourceConsumeClient{stream}
	return x, nil
}

type MessageSource_ConsumeClient interface {
	Send(*ConsumerRequest) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageSourceConsumeClient struct {
	grpc.ClientStream
}

func (x *messageSourceConsumeClient) Send(m *ConsumerRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSourceConsumeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageSource service

type MessageSourceServer interface {
	Consume(MessageSource_ConsumeServer) error
}

func RegisterMessageSourceServer(s *grpc.Server, srv MessageSourceServer) {
	s.RegisterService(&_MessageSource_serviceDesc, srv)
}

func _MessageSource_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSourceServer).Consume(&messageSourceConsumeServer{stream})
}

type MessageSource_ConsumeServer interface {
	Send(*Message) error
	Recv() (*ConsumerRequest, error)
	grpc.ServerStream
}

type messageSourceConsumeServer struct {
	grpc.ServerStream
}

func (x *messageSourceConsumeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSourceConsumeServer) Recv() (*ConsumerRequest, error) {
	m := new(ConsumerRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageSource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.MessageSource",
	HandlerType: (*MessageSourceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Consume",
			Handler:       _MessageSource_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proximo.proto",
}

// Client API for MessageSink service

type MessageSinkClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (MessageSink_PublishClient, error)
}

type messageSinkClient struct {
	cc *grpc.ClientConn
}

func NewMessageSinkClient(cc *grpc.ClientConn) MessageSinkClient {
	return &messageSinkClient{cc}
}

func (c *messageSinkClient) Publish(ctx context.Context, opts ...grpc.CallOption) (MessageSink_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageSink_serviceDesc.Streams[0], c.cc, "/pubsub.MessageSink/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageSinkPublishClient{stream}
	return x, nil
}

type MessageSink_PublishClient interface {
	Send(*PublisherRequest) error
	Recv() (*Confirmation, error)
	grpc.ClientStream
}

type messageSinkPublishClient struct {
	grpc.ClientStream
}

func (x *messageSinkPublishClient) Send(m *PublisherRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageSinkPublishClient) Recv() (*Confirmation, error) {
	m := new(Confirmation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageSink service

type MessageSinkServer interface {
	Publish(MessageSink_PublishServer) error
}

func RegisterMessageSinkServer(s *grpc.Server, srv MessageSinkServer) {
	s.RegisterService(&_MessageSink_serviceDesc, srv)
}

func _MessageSink_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageSinkServer).Publish(&messageSinkPublishServer{stream})
}

type MessageSink_PublishServer interface {
	Send(*Confirmation) error
	Recv() (*PublisherRequest, error)
	grpc.ServerStream
}

type messageSinkPublishServer struct {
	grpc.ServerStream
}

func (x *messageSinkPublishServer) Send(m *Confirmation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageSinkPublishServer) Recv() (*PublisherRequest, error) {
	m := new(PublisherRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageSink_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pubsub.MessageSink",
	HandlerType: (*MessageSinkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _MessageSink_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proximo.proto",
}

func init() { proto.RegisterFile("proximo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x92, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xdf, 0xc2, 0x2b, 0xc8, 0x50, 0xc4, 0x8c, 0x24, 0x36, 0x78, 0xc1, 0x8d, 0x07, 0x12,
	0x23, 0x31, 0x78, 0xd1, 0x13, 0x07, 0x4c, 0x8c, 0x26, 0x1a, 0xb3, 0x7c, 0x82, 0xb6, 0xac, 0xb8,
	0xd1, 0x76, 0xeb, 0xfe, 0x31, 0x7e, 0x08, 0x3f, 0xb4, 0x61, 0x99, 0x9a, 0x42, 0x7a, 0xf1, 0xd6,
	0x27, 0x33, 0xcf, 0x6f, 0xf6, 0x99, 0x29, 0xf4, 0x0a, 0xad, 0xbe, 0x64, 0xa6, 0x26, 0x85, 0x56,
	0x56, 0x61, 0xab, 0x70, 0x89, 0x71, 0x09, 0xbb, 0x80, 0xf6, 0xa3, 0x30, 0x26, 0x5e, 0x09, 0x44,
	0xf8, 0xbf, 0x8c, 0x6d, 0x1c, 0x05, 0xa3, 0x60, 0x1c, 0x72, 0xff, 0x8d, 0x07, 0xd0, 0x90, 0xcb,
	0xa8, 0x31, 0x0a, 0xc6, 0x1d, 0xde, 0x90, 0x4b, 0xf6, 0x1d, 0x40, 0x7f, 0xae, 0x72, 0xe3, 0x32,
	0xa1, 0xb9, 0xf8, 0x70, 0xc2, 0x58, 0x9c, 0x41, 0x68, 0x6c, 0xac, 0x2d, 0x69, 0xdf, 0xdd, 0x9d,
	0x9e, 0x4c, 0x36, 0x13, 0x26, 0x8b, 0x75, 0x8d, 0x3c, 0xd4, 0xc2, 0xb7, 0x0c, 0x78, 0x0d, 0x61,
	0xaa, 0xf2, 0x17, 0xa9, 0xb3, 0xd8, 0x4a, 0x95, 0x47, 0x4d, 0x0f, 0x18, 0x94, 0x80, 0x79, 0xa5,
	0xc6, 0xb7, 0x3a, 0xd9, 0x1d, 0x1c, 0xd5, 0xe0, 0x71, 0x00, 0x7b, 0x56, 0x15, 0x32, 0xf5, 0x51,
	0x3a, 0x7c, 0x23, 0x70, 0x08, 0xfb, 0x29, 0x3d, 0x9d, 0x12, 0xfd, 0x6a, 0x76, 0x06, 0x61, 0x75,
	0xcc, 0x9a, 0x90, 0x99, 0xd5, 0xfd, 0x6d, 0x49, 0xf0, 0x82, 0x7d, 0xc2, 0xe1, 0xb3, 0x4b, 0xde,
	0xa5, 0x79, 0xfd, 0x5b, 0x7a, 0x32, 0xd5, 0xa7, 0x3f, 0x85, 0x66, 0x66, 0x56, 0x14, 0xba, 0x5f,
	0xfa, 0xe8, 0x28, 0x7c, 0x5d, 0x63, 0xe7, 0x14, 0x73, 0x9b, 0x53, 0x1f, 0x73, 0xfa, 0x00, 0x3d,
	0x32, 0x2f, 0x94, 0xd3, 0xa9, 0xc0, 0x1b, 0x68, 0xd3, 0x7e, 0xf0, 0xb8, 0xb2, 0xd3, 0xea, 0x0d,
	0x87, 0xbb, 0x73, 0xd9, 0xbf, 0x71, 0x70, 0x19, 0x4c, 0x9f, 0xa0, 0x5b, 0xb2, 0x64, 0xfe, 0x86,
	0x33, 0x68, 0xd3, 0x13, 0x30, 0x2a, 0x0d, 0xbb, 0x0b, 0x19, 0xd6, 0xde, 0x6d, 0xc3, 0x4b, 0x5a,
	0xfe, 0xe7, 0xbb, 0xfa, 0x09, 0x00, 0x00, 0xff, 0xff, 0x32, 0xd8, 0x68, 0x0a, 0x8d, 0x02, 0x00,
	0x00,
}
